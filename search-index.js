var searchIndex = {};
searchIndex["msi"] = {"doc":"A library for reading/writing Windows Installer (MSI) files.","items":[[3,"Column","msi","A database column.",null,null],[3,"ColumnBuilder","","A factory for configuring a new database column.",null,null],[3,"Expr","","An expression on database rows that can be used in queries.",null,null],[3,"Package","","An MSI package file, backed by an underlying reader/writer (such as a `File` or `Cursor`).",null,null],[3,"Tables","","An iterator over the database tables in a package.",null,null],[3,"Delete","","A database query to delete existing rows.",null,null],[3,"Insert","","A database query to insert new rows.",null,null],[3,"Select","","A database query to select rows.",null,null],[3,"Update","","A database query to update existing rows.",null,null],[3,"StreamReader","","An IO reader for an embedded binary stream in a package.",null,null],[3,"StreamWriter","","An IO writer for an embedded binary stream in a package.",null,null],[3,"Streams","","An iterator over the names of the binary streams in a package.",null,null],[3,"SummaryInfo","","Summary information (e.g. title, author) about an MSI package.",null,null],[3,"Row","","One row from a database table.",null,null],[3,"Rows","","An iterator over the rows in a database table.",null,null],[3,"Table","","A database table.",null,null],[4,"CodePage","","A Windows code page.",null,null],[13,"Windows1250","","Windows-1250 (Latin 2)",0,null],[13,"Windows1251","","Windows-1251 (Cyrillic)",0,null],[13,"Windows1252","","Windows-1252 (Latin 1)",0,null],[13,"Windows1253","","Windows-1253 (Greek)",0,null],[13,"Windows1254","","Windows-1254 (Turkish)",0,null],[13,"Windows1255","","Windows-1255 (Hebrew)",0,null],[13,"Windows1256","","Windows-1256 (Arabic)",0,null],[13,"Windows1257","","Windows-1257 (Baltic)",0,null],[13,"Windows1258","","Windows-1258 (Vietnamese)",0,null],[13,"MacintoshRoman","","Mac OS Roman",0,null],[13,"MacintoshCyrillic","","Macintosh Cyrillic",0,null],[13,"UsAscii","","US-ASCII",0,null],[13,"Iso88591","","ISO-8859-1 (Latin 1)",0,null],[13,"Iso88592","","ISO-8859-2 (Latin 2)",0,null],[13,"Iso88593","","ISO-8859-3 (South European)",0,null],[13,"Iso88594","","ISO-8859-4 (North European)",0,null],[13,"Iso88595","","ISO-8859-5 (Cyrillic)",0,null],[13,"Iso88596","","ISO-8859-6 (Arabic)",0,null],[13,"Iso88597","","ISO-8859-7 (Greek)",0,null],[13,"Iso88598","","ISO-8859-8 (Hebrew)",0,null],[13,"Utf8","","UTF-8",0,null],[4,"ColumnCategory","","Indicates the format of a string-typed database column.",null,null],[13,"Text","","An unrestricted text string.",1,null],[13,"UpperCase","","A text string containing no lowercase letters.",1,null],[13,"LowerCase","","A text string containing no uppercase letters.",1,null],[13,"Integer","","A signed 16-bit integer.",1,null],[13,"DoubleInteger","","A signed 32-bit integer.",1,null],[13,"Identifier","","A string identifier (such as a table or column name).  May only contain alphanumerics, underscores, and periods, and must start with a letter or underscore.",1,null],[13,"Property","","A string that is either an identifier (see above), or a reference to an environment variable (which consists of a `%` character followed by an identifier).",1,null],[13,"Filename","","The name of a file or directory.",1,null],[13,"WildCardFilename","","A filename that can contain shell glob wildcards.",1,null],[13,"Path","","A string containing an absolute filepath.",1,null],[13,"Paths","","A string containing a semicolon-separated list of absolute filepaths.",1,null],[13,"AnyPath","","A string containing an absolute or relative filepath.",1,null],[13,"DefaultDir","","A string containing either a filename or an identifier.",1,null],[13,"RegPath","","A string containing a registry path.",1,null],[13,"Formatted","","A string containing special formatting escapes, such as environment variables.",1,null],[13,"KeyFormatted","","Unknown.",1,null],[13,"Template","","Like `Formatted`, but allows additional escapes.",1,null],[13,"Condition","","A string represeting a boolean predicate.",1,null],[13,"Guid","","A hyphenated, uppercase GUID string, enclosed in curly braces.",1,null],[13,"Version","","A string containing a version number.  The string must consist of at most four period-separated numbers, with each number being at most 65535.",1,null],[13,"Language","","A string containing a comma-separated list of deciaml language ID numbers.",1,null],[13,"Binary","","A string that refers to a binary data stream.",1,null],[13,"CustomSource","","A string that refers to a custom source.",1,null],[13,"Cabinet","","A string that refers to a cabinet.",1,null],[13,"Shortcut","","A string that refers to a shortcut.",1,null],[13,"Url","","A string containing a URL.",1,null],[4,"ColumnType","","A database column data type.",null,null],[13,"Int16","","A 16-bit integer.",2,null],[13,"Int32","","A 32-bit integer.",2,null],[13,"Str","","A string, with the specified maximum length (or zero for no max).",2,null],[4,"PackageType","","The type of MSI package (e.g. installer or patch).",null,null],[13,"Installer","","An installer package, which installs a new application.",3,null],[13,"Patch","","A patch package, which provides an update to an application.",3,null],[13,"Transform","","A transform, which is a collection of changes applied to an installation.",3,null],[4,"Value","","A value from one cell in a database table row.",null,null],[13,"Null","","A null value.",4,null],[13,"Int","","An integer value.",4,null],[13,"Str","","A string value.",4,null],[5,"open","","Opens an existing MSI file at the given path in read-only mode.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"open_rw","","Opens an existing MSI file at the given path in read-write mode.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codepage"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codepage"}],"output":{"name":"bool"}}],[11,"from_id","","Returns the code page (if any) with the given ID number.",0,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"id","","Returns the ID number used within Windows to represent this code page.",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"name","","Returns a human-readable name for this code page.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"decode","","Decodes a byte array into a string, using this code page.  Invalid characters will be replaced with a Unicode replacement character (U+FFFD).",0,null],[11,"encode","","Encodes a string into a byte array, using this code page.  For non-Unicode code pages, any characters that cannot be represented will be replaced with a code-page-specific replacement character (typically `'?'`).",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"codepage"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"columntype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"columncategory"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"columncategory"}],"output":{"name":"bool"}}],[11,"validate","","Returns true if the given string is valid to store in a database column with this category.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"build","","Begins building a new column with the given name.",5,{"inputs":[{"name":"str"}],"output":{"name":"columnbuilder"}}],[11,"name","","Returns the name of the column.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"coltype","","Returns the type of data stored in the column.",5,{"inputs":[{"name":"self"}],"output":{"name":"columntype"}}],[11,"is_localizable","","Returns true if values in this column can be localized.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nullable","","Returns true if values in this column can be null.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_primary_key","","Returns true if this is primary key column.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"value_range","","Returns the (min, max) integer value range for this column, if any.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"category","","Returns the string value category for this column, if any.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"enum_values","","Returns the list of valid enum values for this column, if any.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_valid_value","","Returns true if the given value is valid for this column.",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"localizable","","Makes the column be localizable.",6,{"inputs":[{"name":"self"}],"output":{"name":"columnbuilder"}}],[11,"nullable","","Makes the column allow null values.",6,{"inputs":[{"name":"self"}],"output":{"name":"columnbuilder"}}],[11,"primary_key","","Makes the column be a primary key column.",6,{"inputs":[{"name":"self"}],"output":{"name":"columnbuilder"}}],[11,"range","","Makes the column only permit values in the given range.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"columnbuilder"}}],[11,"foreign_key","","Makes the column refer to a key column in another table.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"columnbuilder"}}],[11,"category","","For string columns, makes the column use the specified data format.",6,{"inputs":[{"name":"self"},{"name":"columncategory"}],"output":{"name":"columnbuilder"}}],[11,"enum_values","","Makes the column only permit the given values.",6,null],[11,"int16","","Builds a column that stores a 16-bit integer.",6,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"int32","","Builds a column that stores a 32-bit integer.",6,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"string","","Builds a column that stores a string.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"column"}}],[11,"id_string","","Builds a column that stores an identifier string.  This is equivalent to `self.category(ColumnCategory::Identifier).string(max_len)`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"column"}}],[11,"text_string","","Builds a column that stores a text string.  This is equivalent to `self.category(ColumnCategory::Text).string(max_len)`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"column"}}],[11,"binary","","Builds a column that refers to a binary data stream.  This sets the category to `ColumnCategory::Binary` in addition to setting the column type.",6,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"col","","Returns an expression that evaluates to the value of the specified column.",7,{"inputs":[{"name":"str"}],"output":{"name":"expr"}}],[11,"null","","Returns an expression that evaluates to a null value.",7,{"inputs":[],"output":{"name":"expr"}}],[11,"boolean","","Returns an expression that evaluates to the given boolean value.",7,{"inputs":[{"name":"bool"}],"output":{"name":"expr"}}],[11,"integer","","Returns an expression that evaluates to the given integer value.",7,{"inputs":[{"name":"i32"}],"output":{"name":"expr"}}],[11,"string","","Returns an expression that evaluates to the given string value.",7,{"inputs":[{"name":"str"}],"output":{"name":"expr"}}],[11,"eq","","Returns an expression that evaluates to true if the two subexpressions evaluate to equal values.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"ne","","Returns an expression that evaluates to true if the two subexpressions evaluate to unequal values.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"lt","","Returns an expression that evaluates to true if the left-hand subexpression evaluates to a strictly lesser value than the right-hand subexpression.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"le","","Returns an expression that evaluates to true if the left-hand subexpression evaluates to a lesser-or-equal value than the right-hand subexpression.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"gt","","Returns an expression that evaluates to true if the left-hand subexpression evaluates to a strictly greater value than the right-hand subexpression.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"ge","","Returns an expression that evaluates to true if the left-hand subexpression evaluates to a greater-or-equal value than the right-hand subexpression.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"bitinv","","Returns an expression that computes the bitwise inverse of the subexpression.  If the subexpression evaluates to a non-number, the result will be a null value.",7,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"and","","Returns an expression that evaluates to true if both subexpressions evaluate to true.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"or","","Returns an expression that evaluates to true if either subexpression evaluates to true.",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"not","","Returns an expression that evaluates to true if the subexpression evaluates to false.",7,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eval","","Evaluates the expression against the given row.  Any errors in the expression (such as dividing a number by zero, or applying a bitwise operator to a string) will result in a null value.",7,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"value"}}],[11,"column_names","","Returns the set of all column names referenced by this expression.",7,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"bitand","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"bitor","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"bitxor","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"shl","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"shr","","",7,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"packagetype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"packagetype"}],"output":{"name":"bool"}}],[11,"package_type","","Returns what type of package this is.",8,{"inputs":[{"name":"self"}],"output":{"name":"packagetype"}}],[11,"summary_info","","Returns summary information for this package.",8,{"inputs":[{"name":"self"}],"output":{"name":"summaryinfo"}}],[11,"database_codepage","","Returns the code page used for serializing strings in the database.",8,{"inputs":[{"name":"self"}],"output":{"name":"codepage"}}],[11,"has_table","","Returns true if the database has a table with the given name.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_table","","Returns the database table with the given name (if any).",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"tables","","Returns an iterator over the database tables in this package.",8,{"inputs":[{"name":"self"}],"output":{"name":"tables"}}],[11,"has_stream","","Returns true if the database has an embedded binary stream with the given name.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"streams","","Returns an iterator over the embedded binary streams in this package.",8,{"inputs":[{"name":"self"}],"output":{"name":"streams"}}],[11,"into_inner","","Consumes the `Package` object, returning the underlying reader/writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"open","","Opens an existing MSI file, using the underlying reader.  If the underlying reader also supports the `Write` trait, then the `Package` object will be writable as well.",8,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"select_rows","","Attempts to execute a select query.  Returns an error if the query fails (e.g. due to the column names being incorrect or the table(s) not existing).",8,{"inputs":[{"name":"self"},{"name":"select"}],"output":{"name":"result"}}],[11,"read_stream","","Opens an existing binary stream in the package for reading.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"create","","Creates a new, empty package of the given type, using the underlying reader/writer.  The reader/writer should be initially empty.",8,{"inputs":[{"name":"packagetype"},{"name":"f"}],"output":{"name":"result"}}],[11,"summary_info_mut","","Returns a mutable reference to the summary information for this package.  Call `flush()` or drop the `Package` object to persist any changes made to the underlying writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"summaryinfo"}}],[11,"set_database_codepage","","Sets the code page used for serializing strings in the database.",8,{"inputs":[{"name":"self"},{"name":"codepage"}],"output":null}],[11,"create_table","","Creates a new database table.  Returns an error without modifying the table name or columns are invalid, or if a table with that name already exists.",8,{"inputs":[{"name":"self"},{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"delete_rows","","Attempts to execute a delete query.  Returns an error without modifying the database if the query fails (e.g. due to the table not existing).",8,{"inputs":[{"name":"self"},{"name":"delete"}],"output":{"name":"result"}}],[11,"insert_rows","","Attempts to execute an insert query.  Returns an error without modifying the database if the query fails (e.g. due to values being invalid, or keys not being unique, or the table not existing).",8,{"inputs":[{"name":"self"},{"name":"insert"}],"output":{"name":"result"}}],[11,"update_rows","","Attempts to execute an update query.  Returns an error without modifying the database if the query fails (e.g. due to values being invalid, or column names being incorrect, or the table not existing).",8,{"inputs":[{"name":"self"},{"name":"update"}],"output":{"name":"result"}}],[11,"write_stream","","Creates (or overwrites) a binary stream in the package.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"flush","","Flushes any buffered changes to the underlying writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"tables"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"from","","Starts building a query that will delete rows from the specified table.",10,{"inputs":[{"name":"str"}],"output":{"name":"delete"}}],[11,"with","","Adds a restriction on which rows should be deleted by the query; only rows that match the given boolean expression will be deleted.  (This method would have been called `where()`, to better match SQL, but `where` is a reserved word in Rust.)",10,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"delete"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","Starts building a query that will insert rows into the specified table.",11,{"inputs":[{"name":"str"}],"output":{"name":"insert"}}],[11,"row","","Adds a new row to be inserted into the table.",11,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"insert"}}],[11,"rows","","Adds multiple new rows to be inserted into the table.",11,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"insert"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"table","","Starts building a query that will select rows from the specified table.",12,{"inputs":[{"name":"str"}],"output":{"name":"select"}}],[11,"inner_join","","Performs an inner join between this and another query, producing a row for each pair of rows from the two tables that matches the expression.",12,{"inputs":[{"name":"self"},{"name":"select"},{"name":"expr"}],"output":{"name":"select"}}],[11,"left_join","","Performs a left join between this and another query.",12,{"inputs":[{"name":"self"},{"name":"select"},{"name":"expr"}],"output":{"name":"select"}}],[11,"columns","","Transforms the selected rows to only include the specified columns, in the order given.",12,null],[11,"with","","Adds a restriction on which rows should be selected by the query; only rows that match the given boolean expression will be returned.  (This method would have been called `where()`, to better match SQL, but `where` is a reserved word in Rust.)",12,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"select"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"table","","Starts building a query that will update rows in the specified table.",13,{"inputs":[{"name":"str"}],"output":{"name":"update"}}],[11,"set","","Adds a column value to be set by the query.",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"value"}],"output":{"name":"update"}}],[11,"with","","Adds a restriction on which rows should be updated by the query; only rows that match the given boolean expression will be updated.  (This method would have been called `where()`, to better match SQL, but `where` is a reserved word in Rust.)",13,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"update"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",14,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"author","","Gets the \"author\" property, if one is set.  This indicates the name of the person or company that created the package.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_author","","Sets the \"author\" property.",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"codepage","","Gets the code page used for serializing this summary info.",17,{"inputs":[{"name":"self"}],"output":{"name":"codepage"}}],[11,"set_codepage","","Sets the code page used for serializing this summary info.",17,{"inputs":[{"name":"self"},{"name":"codepage"}],"output":null}],[11,"comments","","Gets the \"comments\" property, if one is set.  This typically gives a brief description of the application/software that will be installed by the package.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_comments","","Sets the \"comments\" property.",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"creating_application","","Gets the \"creating application\" property, if one is set.  This indicates the name of the software application/tool that was used to create the package.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_creating_application","","Sets the \"creating application\" property.",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"creation_time","","Gets the \"creation time\" property, if one is set.  This indicates the date/time when the package was created.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_creation_time","","Sets the \"creation time\" property.",17,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":null}],[11,"set_creation_time_to_now","","Sets the \"creation time\" property to the current time.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"subject","","Gets the \"subject\" property, if one is set.  This typically indicates the name of the application/software that will be installed by the package.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_subject","","Sets the \"subject\" property.",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"title","","Gets the \"title\" property, if one is set.  This indicates the type of the installer package (e.g. \"Installation Database\" or \"Patch\").",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_title","","Sets the \"title\" property.",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"uuid","","Gets the \"UUID\" property, if one is set.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_uuid","","Sets the \"UUID\" property.",17,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"name","","Returns the name of the table.",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"columns","","Returns the list of columns in this table.",18,null],[11,"has_column","","Returns true if this table has a column with the given name.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_column","","Returns the column with the given name, if any.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"primary_key_indices","","Returns the indices of table's primary key columns.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"len","","Returns the number of values in the row.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"columns","","Returns the list of columns in this row.",19,null],[11,"has_column","","Returns true if this row has a column with the given name.",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"value"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"value"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"is_null","","Returns true if this is a null value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_int","","Returns true if this is an integer value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_int","","Extracts the integer value if it is an integer.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_str","","Returns true if this is a string value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Extracts the string value if it is a string.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"CodePage"],[4,"ColumnCategory"],[4,"ColumnType"],[4,"PackageType"],[4,"Value"],[3,"Column"],[3,"ColumnBuilder"],[3,"Expr"],[3,"Package"],[3,"Tables"],[3,"Delete"],[3,"Insert"],[3,"Select"],[3,"Update"],[3,"StreamReader"],[3,"StreamWriter"],[3,"Streams"],[3,"SummaryInfo"],[3,"Table"],[3,"Row"],[3,"Rows"]]};
initSearch(searchIndex);
